// source: netutils/packet.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.netutils.RawAny', null, global);
goog.exportSymbol('proto.netutils.RawPacket', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.netutils.RawPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.netutils.RawPacket.repeatedFields_, null);
};
goog.inherits(proto.netutils.RawPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.netutils.RawPacket.displayName = 'proto.netutils.RawPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.netutils.RawAny = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.netutils.RawAny, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.netutils.RawAny.displayName = 'proto.netutils.RawAny';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.netutils.RawPacket.repeatedFields_ = [19,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.netutils.RawPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.netutils.RawPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.netutils.RawPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.netutils.RawPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sequenceid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    metadataList: (f = jspb.Message.getRepeatedField(msg, 19)) == null ? undefined : f,
    rawanyList: jspb.Message.toObjectList(msg.getRawanyList(),
    proto.netutils.RawAny.toObject, includeInstance),
    reservedint1: jspb.Message.getFieldWithDefault(msg, 30, 0),
    reservedint2: jspb.Message.getFieldWithDefault(msg, 31, 0),
    reservedstr1: jspb.Message.getFieldWithDefault(msg, 32, ""),
    reservedstr2: jspb.Message.getFieldWithDefault(msg, 33, ""),
    reservedbytes1: msg.getReservedbytes1_asB64(),
    reservedbytes2: msg.getReservedbytes2_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.netutils.RawPacket}
 */
proto.netutils.RawPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.netutils.RawPacket;
  return proto.netutils.RawPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.netutils.RawPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.netutils.RawPacket}
 */
proto.netutils.RawPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceid(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addMetadata(value);
      break;
    case 20:
      var value = new proto.netutils.RawAny;
      reader.readMessage(value,proto.netutils.RawAny.deserializeBinaryFromReader);
      msg.addRawany(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReservedint1(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReservedint2(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setReservedstr1(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setReservedstr2(value);
      break;
    case 34:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReservedbytes1(value);
      break;
    case 35:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReservedbytes2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.netutils.RawPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.netutils.RawPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.netutils.RawPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.netutils.RawPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSequenceid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
  f = message.getRawanyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.netutils.RawAny.serializeBinaryToWriter
    );
  }
  f = message.getReservedint1();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
  f = message.getReservedint2();
  if (f !== 0) {
    writer.writeInt32(
      31,
      f
    );
  }
  f = message.getReservedstr1();
  if (f.length > 0) {
    writer.writeString(
      32,
      f
    );
  }
  f = message.getReservedstr2();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = message.getReservedbytes1_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      34,
      f
    );
  }
  f = message.getReservedbytes2_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      35,
      f
    );
  }
};


/**
 * optional int32 Version = 1;
 * @return {number}
 */
proto.netutils.RawPacket.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 SequenceID = 2;
 * @return {number}
 */
proto.netutils.RawPacket.prototype.getSequenceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.setSequenceid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string metadata = 19;
 * @return {!Array<string>}
 */
proto.netutils.RawPacket.prototype.getMetadataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 19));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.setMetadataList = function(value) {
  return jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.addMetadata = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.clearMetadataList = function() {
  return this.setMetadataList([]);
};


/**
 * repeated RawAny rawAny = 20;
 * @return {!Array<!proto.netutils.RawAny>}
 */
proto.netutils.RawPacket.prototype.getRawanyList = function() {
  return /** @type{!Array<!proto.netutils.RawAny>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.netutils.RawAny, 20));
};


/**
 * @param {!Array<!proto.netutils.RawAny>} value
 * @return {!proto.netutils.RawPacket} returns this
*/
proto.netutils.RawPacket.prototype.setRawanyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.netutils.RawAny=} opt_value
 * @param {number=} opt_index
 * @return {!proto.netutils.RawAny}
 */
proto.netutils.RawPacket.prototype.addRawany = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.netutils.RawAny, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.clearRawanyList = function() {
  return this.setRawanyList([]);
};


/**
 * optional int32 ReservedInt1 = 30;
 * @return {number}
 */
proto.netutils.RawPacket.prototype.getReservedint1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.setReservedint1 = function(value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};


/**
 * optional int32 ReservedInt2 = 31;
 * @return {number}
 */
proto.netutils.RawPacket.prototype.getReservedint2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.setReservedint2 = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional string ReservedStr1 = 32;
 * @return {string}
 */
proto.netutils.RawPacket.prototype.getReservedstr1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/**
 * @param {string} value
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.setReservedstr1 = function(value) {
  return jspb.Message.setProto3StringField(this, 32, value);
};


/**
 * optional string ReservedStr2 = 33;
 * @return {string}
 */
proto.netutils.RawPacket.prototype.getReservedstr2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * @param {string} value
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.setReservedstr2 = function(value) {
  return jspb.Message.setProto3StringField(this, 33, value);
};


/**
 * optional bytes ReservedBytes1 = 34;
 * @return {!(string|Uint8Array)}
 */
proto.netutils.RawPacket.prototype.getReservedbytes1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};


/**
 * optional bytes ReservedBytes1 = 34;
 * This is a type-conversion wrapper around `getReservedbytes1()`
 * @return {string}
 */
proto.netutils.RawPacket.prototype.getReservedbytes1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReservedbytes1()));
};


/**
 * optional bytes ReservedBytes1 = 34;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReservedbytes1()`
 * @return {!Uint8Array}
 */
proto.netutils.RawPacket.prototype.getReservedbytes1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReservedbytes1()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.setReservedbytes1 = function(value) {
  return jspb.Message.setProto3BytesField(this, 34, value);
};


/**
 * optional bytes ReservedBytes2 = 35;
 * @return {!(string|Uint8Array)}
 */
proto.netutils.RawPacket.prototype.getReservedbytes2 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 35, ""));
};


/**
 * optional bytes ReservedBytes2 = 35;
 * This is a type-conversion wrapper around `getReservedbytes2()`
 * @return {string}
 */
proto.netutils.RawPacket.prototype.getReservedbytes2_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReservedbytes2()));
};


/**
 * optional bytes ReservedBytes2 = 35;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReservedbytes2()`
 * @return {!Uint8Array}
 */
proto.netutils.RawPacket.prototype.getReservedbytes2_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReservedbytes2()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.netutils.RawPacket} returns this
 */
proto.netutils.RawPacket.prototype.setReservedbytes2 = function(value) {
  return jspb.Message.setProto3BytesField(this, 35, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.netutils.RawAny.prototype.toObject = function(opt_includeInstance) {
  return proto.netutils.RawAny.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.netutils.RawAny} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.netutils.RawAny.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    raw: msg.getRaw_asB64(),
    passthrough: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.netutils.RawAny}
 */
proto.netutils.RawAny.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.netutils.RawAny;
  return proto.netutils.RawAny.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.netutils.RawAny} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.netutils.RawAny}
 */
proto.netutils.RawAny.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRaw(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassthrough(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.netutils.RawAny.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.netutils.RawAny.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.netutils.RawAny} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.netutils.RawAny.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRaw_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPassthrough();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.netutils.RawAny.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.netutils.RawAny} returns this
 */
proto.netutils.RawAny.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes raw = 2;
 * @return {!(string|Uint8Array)}
 */
proto.netutils.RawAny.prototype.getRaw = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes raw = 2;
 * This is a type-conversion wrapper around `getRaw()`
 * @return {string}
 */
proto.netutils.RawAny.prototype.getRaw_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRaw()));
};


/**
 * optional bytes raw = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRaw()`
 * @return {!Uint8Array}
 */
proto.netutils.RawAny.prototype.getRaw_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRaw()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.netutils.RawAny} returns this
 */
proto.netutils.RawAny.prototype.setRaw = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string passThrough = 3;
 * @return {string}
 */
proto.netutils.RawAny.prototype.getPassthrough = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.netutils.RawAny} returns this
 */
proto.netutils.RawAny.prototype.setPassthrough = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.netutils);
