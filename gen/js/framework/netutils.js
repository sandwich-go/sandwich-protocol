// Code generated by ProtoKitGo. DO NOT EDIT.

"use strict";
exports.__esModule = true;
exports.Netutils = exports.NetPacket = void 0;
var metadata_1 = require("./metadata");
var packet_pb_1 = require("../netutils/packet_pb");
var pb_1 = require("../__init__");
var NetMessage = /** @class */ (function () {
    function NetMessage() {
    }
    NetMessage.prototype.setMessage = function (msg) { this.msg = msg; };
    NetMessage.prototype.getMessage = function () { return this.msg; };
    NetMessage.prototype.setUri = function (uri) { this.uri = uri; };
    NetMessage.prototype.getUri = function () { return this.uri; };
    NetMessage.prototype.setPassThrough = function (passThrough) { this.passThrough = passThrough; };
    NetMessage.prototype.getPassThrough = function () { return this.passThrough; };
    return NetMessage;
}());
exports.NetMessage = NetMessage;
var NetPacket = /** @class */ (function () {
    function NetPacket() {
    }
    NetPacket.prototype.pushMessage = function (msg) {
        var nm = new NetMessage();
        nm.setMessage(msg);
        this.pushNetMessage(nm);
    };
    NetPacket.prototype.pushNetMessage = function (nm) {
        if (!this.mms)
            this.mms = new Array();
        this.mms.push(nm);
    };
    NetPacket.prototype.setMetadata = function (md) { this.md = md; };
    NetPacket.prototype.getMetadata = function () { return this.md; };
    NetPacket.prototype.getNetMessages = function () { return this.mms; };
    NetPacket.prototype.getMessages = function () {
        var out = [];
        if (!!this.mms) {
            for (var _a = 0, msgs_1 = this.mms; _a < msgs_1.length; _a++) {
                out.push(msgs_1[_a].getMessage());
            }
        }
        return out;
    };
    return NetPacket;
}());
exports.NetPacket = NetPacket;
var Netutils = /** @class */ (function () {
    function Netutils() {
    }
    Netutils.nextSequenceID = function () {
        if (Netutils.sequenceID >= 2147483647)
            Netutils.sequenceID = 0;
        Netutils.sequenceID += 1;
        return Netutils.sequenceID;
    };
    Netutils.nextPassThrough = function () {
        if (Netutils.requestIndex >= 2147483647)
            Netutils.requestIndex = 0;
        Netutils.requestIndex += 1;
        return new Date().getTime() + '_' + Netutils.requestIndex;
    };
    Netutils.marshalNetPacketWithMessage = function (md) {
        var msgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            msgs[_i - 1] = arguments[_i];
        }
        var p = new NetPacket();
        p.setMetadata(md);
        for (var _a = 0, msgs_1 = msgs; _a < msgs_1.length; _a++) {
            p.pushMessage(msgs_1[_a]);
        }
        return Netutils.marshalNetPacket(p);
    };
    Netutils.marshalNetPacket = function (p) {
        var packet = new packet_pb_1.RawPacket();
        if (!p.mms)
            p.mms = new Array();
        if (p.mms.length > 1 && !Netutils.EnableQueue) {
            throw new Error("mm is message list, but queue not enabled");
        }
        var anys = new Array();
        for (var _i = 0, _a = p.mms; _i < _a.length; _i++) {
            var msg = _a[_i];
            anys.push(Netutils.encodeMessage(msg));
            if (!Netutils.EnableQueue)
                break;
        }
        if (anys.length == 0) {
            throw new Error("missing message");
        }
        packet.setRawanyList(anys);
        var mdLocal = Netutils.defaultMetadata;
        if (!!p.md) {
            mdLocal = metadata_1.Metadata.join(mdLocal, p.md);
        }
        mdLocal.set("x_create_time", new Date().getTime());
        packet.setMetadataList(metadata_1.Metadata.toPairs(mdLocal));
        packet.setSequenceid(Netutils.nextSequenceID());
        packet.setVersion(Netutils.VersionCode);
        return packet.serializeBinary();
    };
    Netutils.encodeMessage = function (nm) {
        var msg = nm.getMessage();
        var any = new packet_pb_1.RawAny();
        var uri = nm.getUri();
        var passthrough = nm.getPassThrough();
        if (!uri) {
            uri = pb_1.Pb.getUriByMessage(msg.constructor.deserializeBinary);
            if (!uri) {
                throw new Error("uri unregistered");
            }
        }
        if (!passthrough) {
            passthrough = Netutils.nextPassThrough();
        }
        any.setUri(uri);
        any.setRaw(msg.serializeBinary());
        any.setPassthrough(passthrough);
        return any;
    };
    Netutils.decodeMessage = function (uri, passThrough, bytes) {
        var msg = pb_1.Pb.getMessageByUri(uri);
        if (!msg) {
            throw new Error("uri " + uri + "has not registered");
        }
        var nm = new NetMessage();
        nm.setMessage(msg(bytes));
        nm.setUri(uri);
        nm.setPassThrough(passThrough);
        return nm;
    };
    Netutils.unmarshalRawPacket = function (bytes) {
        var packet = packet_pb_1.RawPacket.deserializeBinary(bytes);
        var p = new NetPacket();
        for (var _i = 0, _a = packet.getRawanyList(); _i < _a.length; _i++) {
            var v = _a[_i];
            p.pushNetMessage(Netutils.decodeMessage(v.getUri(), v.getPassthrough(), v.getRaw_asU8()));
            if (!Netutils.EnableQueue)
                break;
        }
        p.setMetadata(metadata_1.Metadata.fromPairs(packet.getMetadataList()));
        return p;
    };
    Netutils.requestIndex = 0;
    Netutils.sequenceID = 0;
    Netutils.EnableQueue = true;
    Netutils.VersionCode = 1;
    Netutils.defaultMetadata = new metadata_1.Metadata();
    return Netutils;
}());
exports.Netutils = Netutils;