// Code generated by ProtoKitGo. DO NOT EDIT.

"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.Metadata = void 0;
var Metadata = /** @class */ (function () {
    function Metadata(kvs) {
        if (!kvs)
            kvs = {};
        this.kvs = kvs;
    }
    Metadata.prototype.append = function (key) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        if (!key || !values || values.length === 0)
            return;
        var lowerKey = key.toLowerCase();
        for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {
            var v = values_1[_a];
            if (!this.kvs[lowerKey])
                this.kvs[lowerKey] = new Array();
            switch (typeof v) {
                case "string":
                    this.kvs[lowerKey].push(v);
                    break;
                case "number":
                    this.kvs[lowerKey].push(v.toString());
                    break;
                case "object":
                    for (var _b = 0, v_1 = v; _b < v_1.length; _b++) {
                        var s = v_1[_b];
                        this.append(key, s);
                    }
                    break;
            }
        }
    };
    Metadata.prototype.reset = function (key) {
        if (!key)
            return;
        this.kvs[key.toLowerCase()] = new Array();
    };
    Metadata.prototype.set = function (key) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        if (!key || !values || values.length === 0)
            return;
        this.reset(key);
        this.append.apply(this, __spreadArrays([key], values));
    };
    Metadata.prototype.get = function (key) {
        if (!key)
            return null;
        return this.kvs[key.toLowerCase()];
    };
    Metadata.prototype.len = function () {
        var l = 0;
        for (var kvsKey in this.kvs) {
            if (!this.kvs.hasOwnProperty(kvsKey))
                continue;
            l += this.kvs[kvsKey].length;
        }
        return l;
    };
    Metadata.prototype.del = function (key) {
        if (!key)
            return;
        delete this.kvs[key.toLowerCase()];
    };
    Metadata.prototype.getFirst = function (key) {
        var vs = this.get(key);
        if (!vs || vs.length == 0)
            return "";
        return vs[0];
    };
    Metadata.prototype.copy = function () {
        return Metadata.join(this);
    };
    Metadata.toPairs = function (md) {
        var out = new Array();
        for (var k in md.kvs) {
            if (!md.kvs.hasOwnProperty(k))
                continue;
            for (var _i = 0, _a = md.kvs[k]; _i < _a.length; _i++) {
                var s = _a[_i];
                out.push(k);
                out.push(s);
            }
        }
        return out;
    };
    Metadata.fromPairs = function (params) {
        var md = new Metadata();
        if (!params || params.length == 0)
            return md;
        if (params.length % 2 == 1)
            return md;
        var key = "";
        for (var i = 0; i < params.length; i++) {
            if (i % 2 == 0) {
                key = params[i].toString();
            }
            else {
                md.append(key, params[i]);
            }
        }
        return md;
    };
    Metadata.join = function () {
        var mds = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            mds[_i] = arguments[_i];
        }
        var md = new Metadata();
        for (var i = 0; i < mds.length; i++) {
            for (var k in mds[i].kvs) {
                if (!mds[i].kvs.hasOwnProperty(k))
                    continue;
                md.append(k, mds[i].kvs[k]);
            }
        }
        return md;
    };
    return Metadata;
}());
exports.Metadata = Metadata;